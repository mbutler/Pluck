var i=new WeakMap;class a{constructor(e={}){const t=e.context||new(window.AudioContext||window.webkitAudioContext),o=t.createGain(),r={context:t,source:null,audioBuffer:null,volume:e.volume||1,loop:e.loop||!1,attack:e.attack||0.04,release:e.release||0.04,gainNode:o,isMicrophone:e.input||!1,mediaStream:null,clearBuffer:e.clearBuffer||!1};i.set(this,r),this.initialized=this.initialize(e)}async initialize(e){try{await this.initSource(e),this.volume=i.get(this).volume}catch(t){console.error("Error initializing source:",t)}}get context(){return i.get(this).context}get source(){return i.get(this).source}set source(e){const t=i.get(this);t.source=e}get volume(){return i.get(this).volume}set volume(e){const t=i.get(this);if(e<0||e>1){console.warn("Volume value must be between 0 and 1.");return}if(t.volume=e,t.gainNode)t.gainNode.gain.value=e}get loop(){return i.get(this).loop}set loop(e){i.get(this).loop=e}get attack(){return i.get(this).attack}set attack(e){i.get(this).attack=e}get release(){return i.get(this).release}set release(e){i.get(this).release=e}get gainNode(){return i.get(this).gainNode}async initSource(e){if(e.file)await this.loadFromFile(e.file);else if(e.wave)this.initFromWave(e.wave);else if(e.input)await this.initFromInput();else if(e.audioFunction)this.initFromFunction(e.audioFunction);else this.initFromWave({type:"sine",frequency:440})}async loadFromFile(e){const t=i.get(this);try{console.log("Fetching sound file:",e);const r=await(await fetch(e)).arrayBuffer(),c=await t.context.decodeAudioData(r);t.audioBuffer=c,console.log("Sound file loaded:",e)}catch(o){console.error("Error loading sound file:",o)}}createSourceFromBuffer(){const e=i.get(this);if(!e.audioBuffer){console.error("No audio buffer to create source from");return}e.source=e.context.createBufferSource(),e.source.buffer=e.audioBuffer,e.source.loop=e.loop,e.source.onended=()=>{if(console.log("Sound playback ended"),e.source=null,e.clearBuffer)this.cleanupAudioBuffer()},console.log("Created source from buffer:",e.source),this.connectSourceToGainNode()}initFromWave(e){const t=i.get(this);t.source=t.context.createOscillator(),t.source.type=e.type||"sine",t.source.frequency.value=e.frequency||440,t.source.onended=()=>{console.log("Sound playback ended"),t.source=null},this.connectSourceToGainNode()}async initFromInput(){const e=i.get(this);try{const t=await navigator.mediaDevices.getUserMedia({audio:!0});e.mediaStream=t,e.source=e.context.createMediaStreamSource(t),this.connectSourceToGainNode()}catch(t){console.error("Error initializing microphone input:",t)}}initFromFunction(e){const t=i.get(this);t.source=t.context.createScriptProcessor(2048,1,1),t.source.onaudioprocess=e,this.connectSourceToGainNode()}connectSourceToGainNode(){const e=i.get(this);if(e.source)e.source.connect(e.gainNode),e.gainNode.connect(e.context.destination),console.log("Source connected to gain node");else console.error("No source to connect to gain node")}async play(e=0){await this.initialized;const t=i.get(this);if(t.context.state==="suspended")await t.context.resume();if(!t.audioBuffer&&!t.source){console.error("No audio buffer or source available to play");return}if(t.audioBuffer)this.createSourceFromBuffer();if(t.source&&t.source.start){console.log("Applying attack"),this.applyAttack();const o=e;t.startTime=t.context.currentTime-o,console.log("Starting source",t.source),t.source.start(t.context.currentTime,o),t.isPlaying=!0,console.log("Playing sound")}else console.error("No source to play")}stop(){const e=i.get(this);if(e.isMicrophone&&e.mediaStream){e.mediaStream.getTracks().forEach((t)=>t.stop()),e.source.disconnect(e.gainNode),e.source=null,console.log("Microphone input stopped");return}if(e.source&&e.source.stop)this.applyRelease(()=>{if(e.source.stop(),e.source=null,e.clearBuffer)this.cleanupAudioBuffer();console.log("Stopping sound")});else console.error("No source to stop")}clone(){const e=i.get(this),t=e.source&&typeof e.source.mediaStream!=="undefined";return new a({volume:e.volume,loop:e.loop,attack:e.attack,release:e.release,file:e.source&&e.source.buffer?e.source.buffer:void 0,wave:e.source&&e.source.frequency?{type:e.source.type,frequency:e.source.frequency.value}:void 0,input:t,audioFunction:e.source.onaudioprocess})}setVolume(e){this.volume=e}applyAttack(){const e=i.get(this);if(!e.gainNode)return;const t=e.context.currentTime;e.gainNode.gain.setValueAtTime(0,t),e.gainNode.gain.linearRampToValueAtTime(e.volume,t+e.attack),console.log("Attack applied")}applyRelease(e){const t=i.get(this);if(!t.gainNode)return;const o=t.context.currentTime;t.gainNode.gain.setValueAtTime(t.volume,o),t.gainNode.gain.linearRampToValueAtTime(0,o+t.release),setTimeout(e,t.release*1000),console.log("Release applied")}cleanupAudioBuffer(){const e=i.get(this);e.audioBuffer=null,console.log("Audio buffer cleaned up")}connect(e){i.get(this).gainNode.connect(e)}disconnect(e){i.get(this).gainNode.disconnect(e)}}var s=a;class u{constructor(){this.context=null,this.sounds=[],this.startTime=null,this.currentTime=0,this.lastTimestamp=0,this.isPlaying=!1}start(){this.context=new(window.AudioContext||window.webkitAudioContext),console.log("Audio context initialized",this.context),this.startTime=this.context.currentTime,console.log("Timeline started",this.startTime),this.isPlaying=!0,this.loop()}async loop(){if(!this.isPlaying)return;if(this.currentTime=this.context.currentTime-this.startTime,await this.playScheduledSounds(),this.currentTime-this.lastTimestamp>=1)this.lastTimestamp=this.currentTime,this.runEverySecond();requestAnimationFrame(()=>this.loop())}stop(){this.isPlaying=!1}scheduleSound(e,t,o=0,r={}){this.sounds.push({sound:e,time:t,offset:o,options:r,played:!1})}async playScheduledSounds(){for(let e of this.sounds){const{sound:t,time:o,offset:r,played:c,options:l}=e;if(this.currentTime>=o&&(!c||l.loop))try{if(await t.play(r),!l.loop)e.played=!0;console.log(`Played sound at ${o} with offset=${r}`)}catch(m){console.error("Error playing sound:",m)}}}async addSound(e,t=0,o,r={}){const c=new s({file:e,context:this.context,...r});await c.initialized,this.scheduleSound(c,o,t,r)}async playSound(e,t=0,o={}){if(!this.context){console.error("Audio context is not initialized. Call start() first.");return}const r=new s({file:e,context:this.context,...o});await r.initialized,await r.play(t)}runEverySecond(){console.log("Every second")}}var f=u;var n=new WeakMap;class h{constructor(e=[]){if(e.length===0)throw new Error("Group requires at least one sound");const t=e[0].context,o=t.createGain(),r={context:t,gainNode:o,sounds:[],muted:!1};n.set(this,r),e.forEach((c)=>{if(c instanceof s)this.addSound(c);else console.error("Sound is not an instance of Sound class:",c)}),o.connect(t.destination)}get context(){return n.get(this).context}get gainNode(){return n.get(this).gainNode}get sounds(){return n.get(this).sounds}async play(e=0){const t=this.sounds.map(async(o)=>{if(!o.isPlaying)try{await o.play(e),o.isPlaying=!0}catch(r){console.error("Error playing sound:",r)}});await Promise.all(t)}async stop(){const e=this.sounds.map(async(t)=>{if(t.isPlaying)t.stop(),t.isPlaying=!1});await Promise.all(e)}async addSound(e){if(!(e instanceof s)){console.error("The sound is not an instance of Sound class:",e);return}const t=n.get(this);t.sounds.push(e),e.connect(t.gainNode),console.log("Added and connected new sound to group gain node:",e)}async removeSound(e){const t=n.get(this),o=t.sounds.indexOf(e);if(o===-1){console.warn("The sound is not in the group");return}if(e.disconnect(t.gainNode),t.sounds.splice(o,1),console.log("Removed and disconnected sound from group gain node:",e),t.sounds.length===0)t.gainNode.disconnect(t.context.destination)}set volume(e){if(e<0||e>1){console.warn("Volume value must be between 0 and 1.");return}n.get(this).gainNode.gain.value=e}get volume(){return n.get(this).gainNode.gain.value}setVolumeGradually(e,t=1){if(e<0||e>1){console.warn("Volume value must be between 0 and 1.");return}const o=n.get(this).gainNode,r=this.context.currentTime;o.gain.setValueAtTime(o.gain.value,r),o.gain.linearRampToValueAtTime(e,r+t),console.log(`Volume set to ${e} over ${t} seconds`)}mute(){if(!this.muted)this.previousVolume=this.volume,this.volume=0,this.muted=!0,console.log("Group muted")}unmute(){if(this.muted)this.volume=this.previousVolume,this.muted=!1,console.log("Group unmuted")}}var d=h;window.Pluck={Timeline:f,Sound:s,Group:d};
