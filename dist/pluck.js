var s=new WeakMap;class n{constructor(e={}){const t=e.context||new(window.AudioContext||window.webkitAudioContext),i=t.createGain(),o={context:t,source:null,audioBuffer:e.audioBuffer||null,volume:e.volume||1,loop:e.loop||!1,attack:e.attack||0.04,release:e.release||0.04,gainNode:i,mediaStream:e.input||null,clearBuffer:e.clearBuffer||!1,isPlaying:!1};s.set(this,o),this.initialized=this.initialize(e)}async initialize(e){try{await this.initSource(e),this.volume=e.volume||1}catch(t){console.error("Error initializing source:",t)}}get context(){return s.get(this).context}get source(){return s.get(this).source}set source(e){const t=s.get(this);t.source=e}get audioBuffer(){return s.get(this).audioBuffer}set audioBuffer(e){const t=s.get(this);t.audioBuffer=e}get volume(){return s.get(this).volume}set volume(e){const t=s.get(this);if(t.volume=e,t.gainNode)t.gainNode.gain.value=e}get loop(){return s.get(this).loop}set loop(e){const t=s.get(this);t.loop=e}get attack(){return s.get(this).attack}set attack(e){const t=s.get(this);t.attack=e}get release(){return s.get(this).release}set release(e){const t=s.get(this);t.release=e}get gainNode(){return s.get(this).gainNode}get mediaStream(){return s.get(this).mediaStream}set mediaStream(e){const t=s.get(this);t.mediaStream=e}get clearBuffer(){return s.get(this).clearBuffer}set clearBuffer(e){const t=s.get(this);t.clearBuffer=e}get isPlaying(){return s.get(this).isPlaying}set isPlaying(e){const t=s.get(this);t.isPlaying=e}async initSource(e){if(e.file)await this.loadFromFile(e.file);else if(e.wave)this.initFromWave(e.wave);else if(e.input)await this.initFromInput();else this.initFromWave({type:"sine",frequency:440})}async loadFromFile(e){try{console.log("Fetching sound file:",e);const i=await(await fetch(e)).arrayBuffer();this.audioBuffer=await this.context.decodeAudioData(i),console.log("Sound file loaded:",e)}catch(t){console.error("Error loading sound file:",t)}}createSourceFromBuffer(){if(!this.audioBuffer){console.error("No audio buffer to create source from");return}this.source=this.context.createBufferSource(),this.source.buffer=this.audioBuffer,this.source.loop=this.loop,this.source.onended=()=>{if(console.log("Sound playback ended"),this.isPlaying=!1,this.source=null,this.clearBuffer)this.audioBuffer=null},console.log("Created source from buffer:",this.source),this.connectSourceToGainNode()}initFromWave(e){this.source=this.context.createOscillator(),this.source.type=e.type||"sine",this.source.frequency.value=e.frequency||440,this.source.onended=()=>{console.log("Sound playback ended"),this.isPlaying=!1,this.source=null},this.connectSourceToGainNode()}async initFromInput(){try{const e=await navigator.mediaDevices.getUserMedia({audio:!0});this.mediaStream=e,this.source=this.context.createMediaStreamSource(e),this.connectSourceToGainNode()}catch(e){console.error("Error initializing microphone input:",e)}}connectSourceToGainNode(){if(this.source)this.source.connect(this.gainNode),this.gainNode.connect(this.context.destination),console.log("Source connected to gain node");else console.error("No source to connect to gain node")}async play(e=0){if(this.isPlaying=!0,await this.initialized,this.context.state==="suspended")await this.context.resume();if(!this.audioBuffer&&!this.source){console.error("No audio buffer or source available to play");return}if(this.audioBuffer)this.createSourceFromBuffer();if(this.source&&this.source.start)this.applyAttack(),console.log("Starting source",this.source),this.source.start(this.context.currentTime,e),console.log("Playing sound")}stop(){if(this.isPlaying=!1,this.mediaStream){this.mediaStream.getTracks().forEach((e)=>e.stop()),this.source.disconnect(this.gainNode),this.source=null,console.log("Microphone input stopped");return}if(this.source&&this.source.stop)this.applyRelease(()=>{if(this.source.stop(),this.source=null,this.clearBuffer)this.audioBuffer=null;console.log("Stopping sound")})}clone(){const e=s.get(this);return new n({context:e.context,audioBuffer:e.audioBuffer,volume:e.volume,loop:e.loop,attack:e.attack,release:e.release,input:this.mediaStream||null,clearBuffer:e.clearBuffer,file:this.source&&this.source.buffer?this.source.buffer:void 0,wave:this.source&&this.source.frequency?{type:this.source.type,frequency:this.source.frequency.value}:void 0})}applyAttack(){if(!this.gainNode)return;const e=this.context.currentTime;this.gainNode.gain.setValueAtTime(0,e),this.gainNode.gain.linearRampToValueAtTime(this.volume,e+this.attack),console.log("Attack applied")}applyRelease(){if(!this.gainNode)return;const e=this.context.currentTime;this.gainNode.gain.setValueAtTime(this.volume,e),this.gainNode.gain.linearRampToValueAtTime(0,e+this.release),console.log("Release applied")}}var c=n;class h{constructor(){this.context=null,this.sounds=[],this.startTime=null,this.currentTime=0,this.lastTimestamp=0,this.isPlaying=!1}start(){this.context=new(window.AudioContext||window.webkitAudioContext),console.log("Audio context initialized",this.context),this.startTime=this.context.currentTime,console.log("Timeline started",this.startTime),this.isPlaying=!0,this.loop()}async loop(){if(!this.isPlaying)return;if(this.currentTime=this.context.currentTime-this.startTime,await this.playScheduledSounds(),this.currentTime-this.lastTimestamp>=1)this.lastTimestamp=this.currentTime,this.runEverySecond();requestAnimationFrame(()=>this.loop())}stop(){this.isPlaying=!1}scheduleSound(e,t,i=0,o={}){this.sounds.push({sound:e,time:t,offset:i,options:o,played:!1})}async playScheduledSounds(){for(let e of this.sounds){const{sound:t,time:i,offset:o,played:r,options:l}=e;if(this.currentTime>=i&&(!r||l.loop))try{if(await t.play(o),!l.loop)e.played=!0;console.log(`Played sound at ${i} with offset=${o}`)}catch(m){console.error("Error playing sound:",m)}}}async addSound(e,t=0,i,o={}){const r=new c({file:e,context:this.context,...o});await r.initialized,this.scheduleSound(r,i,t,o)}async playSound(e,t=0,i={}){if(!this.context){console.error("Audio context is not initialized. Call start() first.");return}const o=new c({file:e,context:this.context,...i});await o.initialized,await o.play(t)}runEverySecond(){console.log("Every second")}}var u=h;var a=new WeakMap;class f{constructor(e=[]){if(e.length===0)throw new Error("Group requires at least one sound");const t=e[0].context,i=t.createGain(),o={context:t,gainNode:i,sounds:[],muted:!1};a.set(this,o),e.forEach((r)=>{if(r instanceof c)this.addSound(r);else console.error("Sound is not an instance of Sound class:",r)}),i.connect(t.destination)}get context(){return a.get(this).context}get gainNode(){return a.get(this).gainNode}get sounds(){return a.get(this).sounds}async play(){const t=a.get(this).sounds.map(async(i)=>{if(!i.isPlaying)try{await i.play(),i.isPlaying=!0}catch(o){console.error("Error playing sound:",o)}});await Promise.all(t)}async stop(){const t=a.get(this).sounds.map(async(i)=>{if(i.isPlaying)i.stop(),i.isPlaying=!1});await Promise.all(t)}async addSound(e){if(!(e instanceof c)){console.error("The sound is not an instance of Sound class:",e);return}const t=a.get(this);if(e.context!==t.context){console.error("Cannot add sound to group: mismatched audio contexts");return}t.sounds.push(e),e.connect(t.gainNode),console.log("Added and connected new sound to group gain node:",e)}async removeSound(e){const t=a.get(this),i=t.sounds.indexOf(e);if(i===-1){console.warn("The sound is not in the group");return}if(e.disconnect(t.gainNode),t.sounds.splice(i,1),console.log("Removed and disconnected sound from group gain node:",e),t.sounds.length===0)t.gainNode.disconnect(t.context.destination)}set volume(e){if(e<0||e>1){console.warn("Volume value must be between 0 and 1.");return}a.get(this).gainNode.gain.value=e}get volume(){return a.get(this).gainNode.gain.value}setVolumeGradually(e,t=1){if(e<0||e>1){console.warn("Volume value must be between 0 and 1.");return}const i=a.get(this).gainNode,o=this.context.currentTime;i.gain.setValueAtTime(i.gain.value,o),i.gain.linearRampToValueAtTime(e,o+t),console.log(`Volume set to ${e} over ${t} seconds`)}mute(){const e=a.get(this);if(!e.muted)e.previousVolume=this.volume,this.volume=0,e.muted=!0,console.log("Group muted")}unmute(){const e=a.get(this);if(e.muted)this.volume=e.previousVolume,e.muted=!1,console.log("Group unmuted")}}var d=f;window.Pluck={Timeline:u,Sound:c,Group:d};
