var i=new WeakMap;class a{constructor(t={}){const e=t.context||new(window.AudioContext||window.webkitAudioContext),n=e.createGain(),s={fileName:t.file||null,context:e,source:null,audioBuffer:t.audioBuffer||null,volume:t.volume||1,loop:t.loop||!1,attack:t.attack||0.04,release:t.release||0.04,offset:t.offset||0,gainNode:n,mediaStream:t.input||null,clearBuffer:t.clearBuffer||!1,isPlaying:!1};i.set(this,s),this.initialized=this.initialize(t)}async initialize(t){try{await this.initSource(t)}catch(e){console.error("Error initializing source:",e)}}get fileName(){return i.get(this).fileName}get context(){return i.get(this).context}get source(){return i.get(this).source}set source(t){const e=i.get(this);e.source=t}get audioBuffer(){return i.get(this).audioBuffer}set audioBuffer(t){const e=i.get(this);e.audioBuffer=t}get volume(){return i.get(this).volume}set volume(t){const e=i.get(this);if(e.volume=t,e.gainNode)e.gainNode.gain.value=t}get loop(){return i.get(this).loop}set loop(t){const e=i.get(this);e.loop=t}get attack(){return i.get(this).attack}set attack(t){const e=i.get(this);e.attack=t}get release(){return i.get(this).release}set release(t){const e=i.get(this);e.release=t}get offset(){return i.get(this).offset}set offset(t){const e=i.get(this);e.offset=t}get gainNode(){return i.get(this).gainNode}get mediaStream(){return i.get(this).mediaStream}set mediaStream(t){const e=i.get(this);e.mediaStream=t}get clearBuffer(){return i.get(this).clearBuffer}set clearBuffer(t){const e=i.get(this);e.clearBuffer=t}get isPlaying(){return i.get(this).isPlaying}set isPlaying(t){const e=i.get(this);e.isPlaying=t}async initSource(t){if(t.file)await this.loadFromFile(t.file);else if(t.wave)this.initFromWave(t.wave);else if(t.input)await this.initFromInput();else this.initFromWave({type:"sine",frequency:440})}async loadFromFile(t){try{console.log("Fetching sound file:",t);const n=await(await fetch(t)).arrayBuffer();this.audioBuffer=await this.context.decodeAudioData(n),this.createSourceFromBuffer(),console.log("Sound file loaded:",t)}catch(e){console.error("Error loading sound file:",e)}}createSourceFromBuffer(){if(!this.audioBuffer){console.error("No audio buffer to create source from");return}this.source=this.context.createBufferSource(),this.source.buffer=this.audioBuffer,this.source.loop=this.loop,this.connectGain(),this.source.onended=()=>{if(console.log("Sound playback ended"),this.isPlaying=!1,this.source=null,this.clearBuffer)this.audioBuffer=null},console.log("Created source from buffer:",this.source)}initFromWave(t){this.source=this.context.createOscillator(),this.source.type=t.type||"sine",this.source.frequency.value=t.frequency||440,this.connectGain(),this.source.onended=()=>{console.log("Sound playback ended"),this.isPlaying=!1,this.source=null}}async initFromInput(){try{const t=await navigator.mediaDevices.getUserMedia({audio:!0});this.mediaStream=t,this.source=this.context.createMediaStreamSource(t),this.connectGain()}catch(t){console.error("Error initializing microphone input:",t)}}connectGain(){if(this.source)this.source.connect(this.gainNode),this.gainNode.connect(this.context.destination),console.log("Source connected to gain node");else console.error("No source to connect to gain node")}async play(){if(this.isPlaying=!0,await this.initialized,this.context.state==="suspended")await this.context.resume();if(!this.audioBuffer&&!this.source){console.error("No audio buffer or source available to play");return}if(this.mediaStream){console.log("Microphone input started");return}if(this.source&&this.source.start)this.applyAttack(),console.log("Starting source",this.source),this.source.start(this.context.currentTime,this.offset);else console.error("No source to play"),this.isPlaying=!1}stop(){if(this.isPlaying=!1,this.mediaStream){this.mediaStream.getTracks().forEach((t)=>t.stop()),this.source.disconnect(),this.source=null,console.log("Microphone input stopped");return}if(this.source&&this.source.stop)this.applyRelease(()=>{if(this.source.stop(),this.source.disconnect(),this.source=null,this.clearBuffer)this.audioBuffer=null;console.log("Stopping sound")})}clone(){const t=i.get(this);return new a({context:t.context,audioBuffer:t.audioBuffer,volume:t.volume,loop:t.loop,attack:t.attack,release:t.release,input:this.mediaStream||null,clearBuffer:t.clearBuffer,file:this.source&&this.source.buffer?this.source.buffer:void 0,wave:this.source&&this.source.frequency?{type:this.source.type,frequency:this.source.frequency.value}:void 0})}applyAttack(){if(!this.gainNode)return;const t=this.context.currentTime;this.gainNode.gain.setValueAtTime(0,t),this.gainNode.gain.linearRampToValueAtTime(this.volume,t+this.attack),console.log("Attack applied")}applyRelease(){if(!this.gainNode)return;const t=this.context.currentTime;this.gainNode.gain.setValueAtTime(this.volume,t),this.gainNode.gain.linearRampToValueAtTime(0,t+this.release),console.log("Release applied")}connect(t){const e=i.get(this);if(e.source)e.source.connect(t);else console.error("No source to connect")}disconnect(t){const e=i.get(this);if(e.source)e.source.disconnect(t);else console.error("No source to disconnect")}}var h=a;class d{constructor(){this.queue=[]}enqueue(t,e){const n={item:t,priority:e};this.queue.push(n),this.bubbleUp(this.queue.length-1)}dequeue(){if(this.isEmpty())return null;const t=this.queue[0],e=this.queue.pop();if(this.queue.length>0)this.queue[0]=e,this.bubbleDown(0);return t.item}peek(){return this.queue[0]}isEmpty(){return this.queue.length===0}bubbleUp(t){const e=this.queue[t];while(t>0){const n=Math.floor((t-1)/2),s=this.queue[n];if(e.priority>=s.priority)break;this.queue[t]=s,t=n}this.queue[t]=e}bubbleDown(t){const e=this.queue.length,n=this.queue[t];while(!0){const s=2*t+1,c=2*t+2;let o=this.queue[s],g=this.queue[c],l=null;if(s<e){if(o.priority<n.priority)l=s}if(c<e){if(l===null&&g.priority<n.priority||l!==null&&g.priority<o?.priority)l=c}if(l===null)break;this.queue[t]=this.queue[l],t=l}this.queue[t]=n}remove(t){const e=this.queue.findIndex((s)=>s.item===t);if(e===-1)return!1;const n=this.queue.pop();if(e<this.queue.length)this.queue[e]=n,this.bubbleUp(e),this.bubbleDown(e);return!0}}var m=d;var u=new WeakMap;class f{constructor(){const t={context:null,currentTime:0,isPlaying:!1,soundQueue:new m,intervalIDs:{},events:{onStart:[],onStop:[],onLoop:[],onSoundScheduled:[],onSoundPlayed:[],onEffectTriggered:[]}};u.set(this,t)}get context(){return u.get(this).context}set context(t){const e=u.get(this);e.context=t}get currentTime(){return u.get(this).currentTime}set currentTime(t){const e=u.get(this);e.currentTime=t}get isPlaying(){return u.get(this).isPlaying}set isPlaying(t){const e=u.get(this);e.isPlaying=t}get soundQueue(){return u.get(this).soundQueue}get intervalIDs(){return u.get(this).intervalIDs}set intervalIDs(t){const e=u.get(this);e.intervalIDs=t}get events(){return u.get(this).events}on(t,e){const n=u.get(this);if(n.events[t])n.events[t].push(e);else console.error(`Event ${t} is not supported.`)}off(t,e){const n=u.get(this);if(n.events[t])n.events[t]=n.events[t].filter((s)=>s!==e);else console.error(`Event ${t} is not supported.`)}future(t){return this.currentTime+t}startTimer(t,e){const n=setInterval(()=>{e()},t*1000);this.intervalIDs={...this.intervalIDs,[t]:n}}stopTimer(t){const e=this.intervalIDs[t];if(e){clearInterval(e);const{[t]:n,...s}=this.intervalIDs;this.intervalIDs=s}}triggerEvent(t,e,n){const s=u.get(this);if(s.events[t])s.events[t].forEach((c)=>c(e,n))}async start(){this.context=new(window.AudioContext||window.webkitAudioContext),console.log("Audio context initialized",this.context),this.isPlaying=!0,this.triggerEvent("onStart"),await this.context.resume(),this.loop()}async loop(){if(!this.isPlaying)return;this.currentTime=this.context.currentTime;while(!this.soundQueue.isEmpty()&&this.soundQueue.peek().priority<=this.currentTime){const t=this.soundQueue.dequeue(),{sound:e,time:n}=t;if(console.log(`Processing item scheduled for time: ${n}`),e){console.log("Playing sound:",e);try{this.triggerEvent("onSoundPlayed",e,this.currentTime),await e.play()}catch(s){console.error("Error playing sound:",s)}}}this.triggerEvent("onLoop"),requestAnimationFrame(()=>this.loop())}stop(){Object.keys(this.intervalIDs).forEach((t)=>{this.stopTimer(Number(t))});while(!this.soundQueue.isEmpty()){const t=this.soundQueue.dequeue(),{sound:e}=t;if(e&&e.isPlaying)e.stop()}if(this.context&&this.context.state!=="closed")this.context.close();this.isPlaying=!1,this.triggerEvent("onStop")}scheduleSound(t,e){this.soundQueue.enqueue({sound:t,time:e},e),console.log("Queue state after scheduling:",this.soundQueue),this.triggerEvent("onSoundScheduled",t,e)}rescheduleSound(t,e){this.soundQueue.remove(t),this.scheduleSound(t,e)}playNow(t){this.soundQueue.enqueue({sound:t,time:this.currentTime},this.currentTime),console.log(`Playing sound immediately at ${this.currentTime}`)}async addSound(t,e,n={}){const s=new h({file:t,...n});await s.initialized,this.scheduleSound(s,e)}async playSound(t,e={}){const n=new h({file:t,...e});await n.initialized,await n.play(),this.triggerEvent("onSoundPlayed",n,this.currentTime)}runEverySecond(){console.log("Every second")}}var y=f;var r=new WeakMap;class q{constructor(t,e){if(!t){console.error("No audio context provided to Group");return}const n=e.filter((o)=>o.context!==t);if(n.length){console.error("Sounds with mismatched audio contexts:",n);return}console.log("Creating new group with sounds:",e),e.forEach((o)=>{o.source.disconnect(o.gainNode)});const s=t.createGain();e.forEach((o)=>{o.connect(s)}),s.connect(t.destination);const c={context:t,gainNode:s,sounds:e.filter((o)=>o instanceof h)||[],volume:1,muted:!1,previousVolume:1};r.set(this,c)}get context(){return r.get(this).context}get gainNode(){return r.get(this).gainNode}get sounds(){return r.get(this).sounds}get volume(){return r.get(this).gainNode.gain.value}set volume(t){r.get(this).gainNode.gain.value=t}get muted(){return r.get(this).muted}set muted(t){r.get(this).muted=t}get previousVolume(){return r.get(this).previousVolume}set previousVolume(t){r.get(this).previousVolume=t}async play(){const t=this.sounds.map(async(e)=>{if(!e.isPlaying)try{await e.play()}catch(n){console.error("Error playing sound:",n)}});await Promise.all(t)}async stop(){const t=this.sounds.map(async(e)=>{if(e.isPlaying)e.stop()});await Promise.all(t)}addSounds(t){if(!Array.isArray(t)){console.error("Not an array of sounds");return}t.forEach((e)=>{if(!(e instanceof h)){console.error("The sound is not an instance of Sound class:",e);return}if(e.context!==this.context){console.error("Cannot add sound to group: mismatched audio contexts",e);return}this.sounds.push(e),e.connect(this.gainNode),console.log("Added and connected new sound to group gain node:",e)})}removeSound(t){const e=this.sounds.indexOf(t);if(e===-1){console.warn("The sound is not in the group");return}if(t.disconnect(this.gainNode),this.sounds.splice(e,1),console.log("Removed and disconnected sound from group gain node:",t),this.sounds.length===0)this.gainNode.disconnect(this.context.destination)}setVolumeGradually(t,e=1){const n=this.context.currentTime;gainNode.gain.setValueAtTime(gainNode.gain.value,n),gainNode.gain.linearRampToValueAtTime(t,n+e),console.log(`Volume set to ${t} over ${e} seconds`)}mute(){if(!this.muted)this.previousVolume=this.volume,this.volume=0,this.muted=!0,console.log("Group muted")}unmute(){if(this.muted)this.volume=this.previousVolume,this.muted=!1,console.log("Group unmuted")}}var w=q;window.Pluck={Timeline:y,Sound:h,Group:w};
