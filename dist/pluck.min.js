class y{constructor(){this.events={start:[],stop:[],loop:[],scheduled:[],play:[],effect:[]}}on(t,e){if(this.events[t])this.events[t].push(e);else console.error(`Event ${t} is not supported.`)}off(t,e){if(this.events[t])this.events[t]=this.events[t].filter((i)=>i!==e);else console.error(`Event ${t} is not supported.`)}trigger(t,e,i){if(this.events[t])this.events[t].forEach((h)=>h(e,i))}}var a=y;var s=new WeakMap;class f{constructor(t={}){let e=t.context||new(window.AudioContext||window.webkitAudioContext),i=e.createGain(),h={fileName:t.file||null,context:e,source:null,audioBuffer:t.audioBuffer||null,volume:t.volume||1,loop:t.loop||!1,attack:t.attack||0.04,release:t.release||0.04,offset:t.offset||0,gainNode:i,mediaStream:t.input||null,clearBuffer:t.clearBuffer||!1,isPlaying:!1,isGrouped:!1,events:new a,animationFrameId:null,intervalIDs:{}};s.set(this,h),this.initialized=this.initialize(t)}async initialize(t){try{await this.initSource(t)}catch(e){throw console.error("Error initializing source:",e),e}}async initSource(t){if(t.file)await this.loadFromFile(t.file);else if(t.wave)this.initFromWave(t.wave);else if(t.input)await this.initFromInput();else this.initFromWave({type:"sine",frequency:440})}async loadFromFile(t){try{let i=await(await fetch(t)).arrayBuffer();this.audioBuffer=await this.context.decodeAudioData(i),this.createSourceFromBuffer()}catch(e){console.error("Error loading sound file:",e)}}createSourceFromBuffer(){if(!this.audioBuffer){console.error("No audio buffer to create source from");return}this.source=this.context.createBufferSource(),this.source.buffer=this.audioBuffer,this.source.loop=this.loop,this.connectGain(),this.source.onended=()=>{if(this.isPlaying=!1,this.source=null,this.clearBuffer)this.audioBuffer=null}}initFromWave(t){this.source=this.context.createOscillator(),this.source.type=t.type||"sine",this.source.frequency.value=t.frequency||440,this.connectGain(),this.source.onended=()=>{this.isPlaying=!1,this.source=null}}async initFromInput(){try{let t=await navigator.mediaDevices.getUserMedia({audio:!0});this.mediaStream=t,this.source=this.context.createMediaStreamSource(t),this.connectGain()}catch(t){console.error("Error initializing microphone input:",t)}}connectGain(){if(this.source)this.source.connect(this.gainNode),this.gainNode.connect(this.context.destination);else console.error("No source to connect to gain node")}async play(t=!1){if(this.isGrouped&&!t){console.warn(`Cannot play the sound ${this.fileName} directly. It is in a group.`);return}if(this.isPlaying=!0,await this.initialized,this.context.state==="suspended")await this.context.resume();if(!this.audioBuffer&&!this.source){console.error("No audio buffer or source available to play");return}if(!this.isGrouped&&this.audioBuffer&&!t)this.source=null,this.createSourceFromBuffer();if(this.mediaStream)return;if(this.source&&this.source.start)this.applyAttack(),this.events.trigger("play"),this.source.start(this.context.currentTime,this.offset);else console.error("No source to play"),this.isPlaying=!1}stop(){if(this.isPlaying=!1,this.source){if(this.source.disconnect(),this.source.stop)this.source.stop();this.source=null}if(this.mediaStream)this.mediaStream.getTracks().forEach((t)=>t.stop()),this.mediaStream=null;if(this.clearBuffer)this.audioBuffer=null;if(this.animationFrameId)cancelAnimationFrame(this.animationFrameId)}clone(){let t=s.get(this);return new f({context:t.context,audioBuffer:t.audioBuffer,volume:t.volume,loop:t.loop,attack:t.attack,release:t.release,input:this.mediaStream||null,clearBuffer:t.clearBuffer,file:this.source&&this.source.buffer?this.source.buffer:void 0,wave:this.source&&this.source.frequency?{type:this.source.type,frequency:this.source.frequency.value}:void 0})}applyAttack(){if(!this.gainNode)return;let t=this.context.currentTime;this.gainNode.gain.setValueAtTime(0,t),this.gainNode.gain.linearRampToValueAtTime(this.volume,t+this.attack)}applyRelease(t){if(!this.gainNode)return;let e=this.context.currentTime;if(this.gainNode.gain.setValueAtTime(this.volume,e),this.gainNode.gain.linearRampToValueAtTime(0,e+this.release),typeof t==="function")setTimeout(t,this.release*1000)}connect(t){let e=s.get(this);if(e.source)e.source.connect(t);else console.error("No source to connect")}disconnect(t){let e=s.get(this);if(e.source)e.source.disconnect(t);else console.error("No source to disconnect")}get fileName(){return s.get(this).fileName}get context(){return s.get(this).context}get source(){return s.get(this).source}set source(t){let e=s.get(this);e.source=t}get audioBuffer(){return s.get(this).audioBuffer}set audioBuffer(t){let e=s.get(this);e.audioBuffer=t}get volume(){return s.get(this).volume}set volume(t){if(t<0||t>1)throw new Error("Volume must be between 0 and 1");let e=s.get(this);if(e.volume=t,e.gainNode)e.gainNode.gain.value=t}get loop(){return s.get(this).loop}set loop(t){let e=s.get(this);e.loop=t}get attack(){return s.get(this).attack}set attack(t){let e=s.get(this);e.attack=t}get release(){return s.get(this).release}set release(t){let e=s.get(this);e.release=t}get offset(){return s.get(this).offset}set offset(t){let e=s.get(this);e.offset=t}get gainNode(){return s.get(this).gainNode}get mediaStream(){return s.get(this).mediaStream}set mediaStream(t){let e=s.get(this);e.mediaStream=t}get clearBuffer(){return s.get(this).clearBuffer}set clearBuffer(t){let e=s.get(this);e.clearBuffer=t}get isPlaying(){return s.get(this).isPlaying}set isPlaying(t){let e=s.get(this);e.isPlaying=t}get isGrouped(){return s.get(this).isGrouped}set isGrouped(t){let e=s.get(this);e.isGrouped=t}get events(){return s.get(this).events}set events(t){let e=s.get(this);e.events=t}async loop(){if(!this.isPlaying)return;this.animationFrameId=requestAnimationFrame(()=>this.loop())}scheduleSound(t,e){if(e<this.currentTime){console.warn("Cannot schedule sound in the past");return}if(this.soundQueue.find((i)=>i.item.sound===t)){console.warn("Sound is already scheduled");return}this.soundQueue.enqueue({sound:t,time:e},e),this.events.trigger("scheduled",t,e)}startInterval(t,e){if(this.intervalIDs[t])this.stopInterval(t);let i=setInterval(()=>{if(!this.isPlaying){this.stopInterval(t);return}e()},t*1000);this.intervalIDs={...this.intervalIDs,[t]:i}}async addSound(t,e,i={}){let h=new f({file:t,...i});try{await Promise.race([h.initialized,new Promise((r,l)=>setTimeout(()=>l(new Error("Sound loading timeout")),5000))]),this.scheduleSound(h,e)}catch(r){console.error("Failed to load sound:",r),this.events.trigger("error",r)}}fadeVolumeTo(t,e=1){let i=this.context.currentTime;this.gainNode.gain.setValueAtTime(this.gainNode.gain.value,i),this.gainNode.gain.linearRampToValueAtTime(t,i+e)}}var g=f;class q{constructor(){this.queue=[]}enqueue(t,e){let i={item:t,priority:e};this.queue.push(i),this.bubbleUp(this.queue.length-1)}dequeue(){if(this.isEmpty())return null;let t=this.queue[0],e=this.queue.pop();if(this.queue.length>0)this.queue[0]=e,this.bubbleDown(0);return t.item}peek(){return this.queue[0]}isEmpty(){return this.queue.length===0}bubbleUp(t){let e=this.queue[t];while(t>0){let i=Math.floor((t-1)/2),h=this.queue[i];if(e.priority>=h.priority)break;this.queue[t]=h,t=i}this.queue[t]=e}bubbleDown(t){let e=this.queue.length,i=this.queue[t];while(!0){let h=2*t+1,r=2*t+2,l=this.queue[h],m=this.queue[r],c=null;if(h<e){if(l.priority<i.priority)c=h}if(r<e){if(c===null&&m.priority<i.priority||c!==null&&m.priority<l?.priority)c=r}if(c===null)break;this.queue[t]=this.queue[c],t=c}this.queue[t]=i}remove(t){let e=this.queue.findIndex((h)=>h.item===t);if(e===-1)return!1;let i=this.queue.pop();if(e<this.queue.length)this.queue[e]=i,this.bubbleUp(e),this.bubbleDown(e);return!0}}var w=q;var u=new WeakMap;class o{constructor(){let t={context:null,currentTime:0,isPlaying:!1,soundQueue:new w,intervalIDs:{},events:new a};u.set(this,t)}startInterval(t,e){let i=setInterval(()=>{e()},t*1000);this.intervalIDs={...this.intervalIDs,[t]:i}}stopInterval(t){let e=this.intervalIDs[t];if(e){clearInterval(e);let{[t]:i,...h}=this.intervalIDs;this.intervalIDs=h}}async start(){console.info("Starting timeline"),this.context=new(window.AudioContext||window.webkitAudioContext),this.isPlaying=!0,this.events.trigger("start"),await this.context.resume(),this.loop()}async loop(){if(!this.isPlaying)return;this.currentTime=this.context.currentTime;while(!this.soundQueue.isEmpty()&&this.soundQueue.peek().priority<=this.currentTime){let t=this.soundQueue.dequeue(),{sound:e,time:i}=t;if(e)try{await e.play(),this.events.trigger("play",e,this.currentTime)}catch(h){console.error("Error playing sound:",h)}}this.events.trigger("loop"),requestAnimationFrame(()=>this.loop())}stop(){Object.keys(this.intervalIDs).forEach((t)=>{this.stopInterval(Number(t))});while(!this.soundQueue.isEmpty()){let t=this.soundQueue.dequeue(),{sound:e}=t;if(e&&e.isPlaying)e.stop()}if(this.context&&this.context.state!=="closed")this.context.close();this.isPlaying=!1,this.events.trigger("stop")}scheduleSound(t,e){this.soundQueue.enqueue({sound:t,time:e},e),this.events.trigger("scheduled",t,e)}rescheduleSound(t,e){this.soundQueue.remove(t),this.scheduleSound(t,e)}playNow(t){this.soundQueue.enqueue({sound:t,time:this.currentTime},this.currentTime)}async addSound(t,e,i={}){let h=new g({file:t,...i});await h.initialized,this.scheduleSound(h,e)}async playSound(t,e={}){let i=new g({file:t,...e});await i.initialized,await i.play(),this.events.trigger("play",i,this.currentTime)}future(t){return this.currentTime+t}runEverySecond(){console.info("Every second")}get context(){return u.get(this).context}set context(t){let e=u.get(this);e.context=t}get currentTime(){return u.get(this).currentTime}set currentTime(t){let e=u.get(this);e.currentTime=t}get isPlaying(){return u.get(this).isPlaying}set isPlaying(t){let e=u.get(this);e.isPlaying=t}get soundQueue(){return u.get(this).soundQueue}get intervalIDs(){return u.get(this).intervalIDs}set intervalIDs(t){let e=u.get(this);e.intervalIDs=t}get events(){return u.get(this).events}set events(t){let e=u.get(this);e.events=t}}var b=o;var n=new WeakMap;class D{constructor(t){if(!t instanceof AudioContext){console.error("No audio context provided to Group");return}let e=t.createGain();e.connect(t.destination);let i={context:t,gainNode:e,sounds:[],volume:1,muted:!1,previousVolume:1};n.set(this,i)}async play(){let t=this.sounds.map(async(e)=>{if(!e.isPlaying)try{await e.play(!0)}catch(i){console.error("Error playing sound:",i)}});await Promise.all(t)}async stop(){let t=this.sounds.map(async(e)=>{if(e.isPlaying)e.stop()});await Promise.all(t)}addSounds(t){if(!Array.isArray(t)){console.error("Not an array of sounds");return}t.forEach((e)=>{if(!(e instanceof g)){console.error("The sound is not an instance of Sound class:",e);return}if(e.context!==this.context){console.error("Cannot add sound to group: mismatched audio contexts",e);return}e.isGrouped=!0,e.disconnect(e.gainNode),this.sounds.push(e),e.connect(this.gainNode)})}removeSound(t){let e=this.sounds.indexOf(t);if(e===-1){console.warn("The sound is not in the group");return}if(t.disconnect(this.gainNode),this.sounds.splice(e,1),this.sounds.length===0)this.gainNode.disconnect(this.context.destination)}fadeVolumeTo(t,e=1){let i=this.context.currentTime;gainNode.gain.setValueAtTime(gainNode.gain.value,i),gainNode.gain.linearRampToValueAtTime(t,i+e),console.log(`Volume set to ${t} over ${e} seconds`)}mute(){if(!this.muted)this.previousVolume=this.volume,this.volume=0,this.muted=!0}unmute(){if(this.muted)this.volume=this.previousVolume,this.muted=!1}get context(){return n.get(this).context}get gainNode(){return n.get(this).gainNode}get sounds(){return n.get(this).sounds}get volume(){return n.get(this).gainNode.gain.value}set volume(t){n.get(this).gainNode.gain.value=t}get muted(){return n.get(this).muted}set muted(t){n.get(this).muted=t}get previousVolume(){return n.get(this).previousVolume}set previousVolume(t){n.get(this).previousVolume=t}}var N=D;window.Pluck={Timeline:b,Sound:g,Group:N};
