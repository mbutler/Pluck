var s=new WeakMap;class u{constructor(e={}){const t=e.context||new(window.AudioContext||window.webkitAudioContext),i=t.createGain(),c={fileName:e.file||null,context:t,source:null,audioBuffer:e.audioBuffer||null,volume:e.volume||1,loop:e.loop||!1,attack:e.attack||0.04,release:e.release||0.04,offset:e.offset||0,gainNode:i,mediaStream:e.input||null,clearBuffer:e.clearBuffer||!1,isPlaying:!1};s.set(this,c),this.initialized=this.initialize(e)}async initialize(e){try{await this.initSource(e)}catch(t){console.error("Error initializing source:",t)}}get fileName(){return s.get(this).fileName}get context(){return s.get(this).context}get source(){return s.get(this).source}set source(e){const t=s.get(this);t.source=e}get audioBuffer(){return s.get(this).audioBuffer}set audioBuffer(e){const t=s.get(this);t.audioBuffer=e}get volume(){return s.get(this).volume}set volume(e){const t=s.get(this);if(t.volume=e,t.gainNode)t.gainNode.gain.value=e}get loop(){return s.get(this).loop}set loop(e){const t=s.get(this);t.loop=e}get attack(){return s.get(this).attack}set attack(e){const t=s.get(this);t.attack=e}get release(){return s.get(this).release}set release(e){const t=s.get(this);t.release=e}get offset(){return s.get(this).offset}set offset(e){const t=s.get(this);t.offset=e}get gainNode(){return s.get(this).gainNode}get mediaStream(){return s.get(this).mediaStream}set mediaStream(e){const t=s.get(this);t.mediaStream=e}get clearBuffer(){return s.get(this).clearBuffer}set clearBuffer(e){const t=s.get(this);t.clearBuffer=e}get isPlaying(){return s.get(this).isPlaying}set isPlaying(e){const t=s.get(this);t.isPlaying=e}async initSource(e){if(e.file)await this.loadFromFile(e.file);else if(e.wave)this.initFromWave(e.wave);else if(e.input)await this.initFromInput();else this.initFromWave({type:"sine",frequency:440})}async loadFromFile(e){try{console.log("Fetching sound file:",e);const i=await(await fetch(e)).arrayBuffer();this.audioBuffer=await this.context.decodeAudioData(i),this.createSourceFromBuffer(),console.log("Sound file loaded:",e)}catch(t){console.error("Error loading sound file:",t)}}createSourceFromBuffer(){if(!this.audioBuffer){console.error("No audio buffer to create source from");return}this.source=this.context.createBufferSource(),this.source.buffer=this.audioBuffer,this.source.loop=this.loop,this.connectSourceToGainNode(),this.source.onended=()=>{if(console.log("Sound playback ended"),this.isPlaying=!1,this.source=null,this.clearBuffer)this.audioBuffer=null},console.log("Created source from buffer:",this.source)}initFromWave(e){this.source=this.context.createOscillator(),this.source.type=e.type||"sine",this.source.frequency.value=e.frequency||440,this.connectSourceToGainNode(),this.source.onended=()=>{console.log("Sound playback ended"),this.isPlaying=!1,this.source=null}}async initFromInput(){try{const e=await navigator.mediaDevices.getUserMedia({audio:!0});this.mediaStream=e,this.source=this.context.createMediaStreamSource(e),this.connectSourceToGainNode()}catch(e){console.error("Error initializing microphone input:",e)}}connectSourceToGainNode(){if(this.source)this.source.connect(this.gainNode),this.gainNode.connect(this.context.destination),console.log("Source connected to gain node");else console.error("No source to connect to gain node")}async play(){if(this.isPlaying=!0,await this.initialized,this.context.state==="suspended")await this.context.resume();if(!this.audioBuffer&&!this.source){console.error("No audio buffer or source available to play");return}if(this.audioBuffer)this.createSourceFromBuffer();if(this.mediaStream){console.log("Microphone input started");return}if(this.source&&this.source.start)this.applyAttack(),console.log("Starting source",this.source),this.source.start(this.context.currentTime,this.offset);else console.error("No source to play"),this.isPlaying=!1}stop(){if(this.isPlaying=!1,this.mediaStream){this.mediaStream.getTracks().forEach((e)=>e.stop()),this.source.disconnect(),this.source=null,console.log("Microphone input stopped");return}if(this.source&&this.source.stop)this.applyRelease(()=>{if(this.source.stop(),this.source.disconnect(),this.source=null,this.clearBuffer)this.audioBuffer=null;console.log("Stopping sound")})}clone(){const e=s.get(this);return new u({context:e.context,audioBuffer:e.audioBuffer,volume:e.volume,loop:e.loop,attack:e.attack,release:e.release,input:this.mediaStream||null,clearBuffer:e.clearBuffer,file:this.source&&this.source.buffer?this.source.buffer:void 0,wave:this.source&&this.source.frequency?{type:this.source.type,frequency:this.source.frequency.value}:void 0})}applyAttack(){if(!this.gainNode)return;const e=this.context.currentTime;this.gainNode.gain.setValueAtTime(0,e),this.gainNode.gain.linearRampToValueAtTime(this.volume,e+this.attack),console.log("Attack applied")}applyRelease(){if(!this.gainNode)return;const e=this.context.currentTime;this.gainNode.gain.setValueAtTime(this.volume,e),this.gainNode.gain.linearRampToValueAtTime(0,e+this.release),console.log("Release applied")}connect(e){const t=s.get(this);if(t.source)t.source.connect(e);else console.error("No source to connect")}disconnect(e){const t=s.get(this);if(t.source)t.source.disconnect(e);else console.error("No source to disconnect")}}var h=u;class g{constructor(){this.queue=[]}enqueue(e,t){const i={item:e,priority:t};this.queue.push(i),this.bubbleUp(this.queue.length-1)}dequeue(){if(this.isEmpty())return null;const e=this.queue[0],t=this.queue.pop();if(this.queue.length>0)this.queue[0]=t,this.bubbleDown(0);return e.item}peek(){return this.queue[0]}isEmpty(){return this.queue.length===0}bubbleUp(e){const t=this.queue[e];while(e>0){const i=Math.floor((e-1)/2),c=this.queue[i];if(t.priority>=c.priority)break;this.queue[e]=c,e=i}this.queue[e]=t}bubbleDown(e){const t=this.queue.length,i=this.queue[e];while(!0){const c=2*e+1,o=2*e+2;let f=this.queue[c],n=this.queue[o],l=null;if(c<t){if(f.priority<i.priority)l=c}if(o<t){if(l===null&&n.priority<i.priority||l!==null&&n.priority<f?.priority)l=o}if(l===null)break;this.queue[e]=this.queue[l],e=l}this.queue[e]=i}remove(e){const t=this.queue.findIndex((c)=>c.item===e);if(t===-1)return!1;const i=this.queue.pop();if(t<this.queue.length)this.queue[t]=i,this.bubbleUp(t),this.bubbleDown(t);return!0}}var y=g;var a=new WeakMap;class m{constructor(){const e={context:null,currentTime:0,isPlaying:!1,soundQueue:new y,events:{onStart:[],onStop:[],onLoop:[],onSoundScheduled:[],onSoundPlayed:[],onEffectTriggered:[]}};a.set(this,e)}get context(){return a.get(this).context}set context(e){const t=a.get(this);t.context=e}get currentTime(){return a.get(this).currentTime}set currentTime(e){const t=a.get(this);t.currentTime=e}get isPlaying(){return a.get(this).isPlaying}set isPlaying(e){const t=a.get(this);t.isPlaying=e}get soundQueue(){return a.get(this).soundQueue}get events(){return a.get(this).events}on(e,t){const i=a.get(this);if(i.events[e])i.events[e].push(t);else console.error(`Event ${e} is not supported.`)}off(e,t){const i=a.get(this);if(i.events[e])i.events[e]=i.events[e].filter((c)=>c!==t);else console.error(`Event ${e} is not supported.`)}triggerEvent(e,t,i){const c=a.get(this);if(c.events[e])c.events[e].forEach((o)=>o(t,i))}async start(){this.context=new(window.AudioContext||window.webkitAudioContext),console.log("Audio context initialized",this.context),this.isPlaying=!0,this.triggerEvent("onStart"),await this.context.resume(),this.loop()}async loop(){if(!this.isPlaying)return;this.currentTime=this.context.currentTime;while(!this.soundQueue.isEmpty()&&this.soundQueue.peek().priority<=this.currentTime){const e=this.soundQueue.dequeue(),{sound:t,time:i}=e;if(console.log(`Processing item scheduled for time: ${i}`),t){console.log("Playing sound:",t);try{this.triggerEvent("onSoundPlayed",t,this.currentTime),await t.play()}catch(c){console.error("Error playing sound:",c)}}}this.triggerEvent("onLoop"),requestAnimationFrame(()=>this.loop())}stop(){this.isPlaying=!1,this.triggerEvent("onStop")}scheduleSound(e,t){this.soundQueue.enqueue({sound:e,time:t},t),console.log("Queue state after scheduling:",this.soundQueue),this.triggerEvent("onSoundScheduled",e,t)}rescheduleSound(e,t){this.soundQueue.remove(e),this.scheduleSound(e,t)}playNow(e){this.soundQueue.enqueue({sound:e,time:this.currentTime},this.currentTime),console.log(`Playing sound immediately at ${this.currentTime}`)}async addSound(e,t,i={}){const c=new h({file:e,...i});await c.initialized,this.scheduleSound(c,t)}async playSound(e,t={}){if(!this.context){console.error("Audio context is not initialized. Call start() first.");return}const i=new h({file:e,...t});await i.initialized,await i.play(),this.triggerEvent("onSoundPlayed",i,this.currentTime)}runEverySecond(){console.log("Every second")}}var q=m;var r=new WeakMap;class B{constructor(e=[]){if(e.length===0)throw new Error("Group requires at least one sound");const t=e[0].context,i=t.createGain(),c={context:t,gainNode:i,sounds:[],muted:!1};r.set(this,c),e.forEach((o)=>{if(o instanceof h)this.addSound(o);else console.error("Sound is not an instance of Sound class:",o)}),i.connect(t.destination)}get context(){return r.get(this).context}get gainNode(){return r.get(this).gainNode}get sounds(){return r.get(this).sounds}async play(){const t=r.get(this).sounds.map(async(i)=>{if(!i.isPlaying)try{await i.play(),i.isPlaying=!0}catch(c){console.error("Error playing sound:",c)}});await Promise.all(t)}async stop(){const t=r.get(this).sounds.map(async(i)=>{if(i.isPlaying)i.stop(),i.isPlaying=!1});await Promise.all(t)}async addSound(e){if(!(e instanceof h)){console.error("The sound is not an instance of Sound class:",e);return}const t=r.get(this);if(e.context!==t.context){console.error("Cannot add sound to group: mismatched audio contexts");return}t.sounds.push(e),e.connect(t.gainNode),console.log("Added and connected new sound to group gain node:",e)}async removeSound(e){const t=r.get(this),i=t.sounds.indexOf(e);if(i===-1){console.warn("The sound is not in the group");return}if(e.disconnect(t.gainNode),t.sounds.splice(i,1),console.log("Removed and disconnected sound from group gain node:",e),t.sounds.length===0)t.gainNode.disconnect(t.context.destination)}set volume(e){if(e<0||e>1){console.warn("Volume value must be between 0 and 1.");return}r.get(this).gainNode.gain.value=e}get volume(){return r.get(this).gainNode.gain.value}setVolumeGradually(e,t=1){if(e<0||e>1){console.warn("Volume value must be between 0 and 1.");return}const i=r.get(this).gainNode,c=this.context.currentTime;i.gain.setValueAtTime(i.gain.value,c),i.gain.linearRampToValueAtTime(e,c+t),console.log(`Volume set to ${e} over ${t} seconds`)}mute(){const e=r.get(this);if(!e.muted)e.previousVolume=this.volume,this.volume=0,e.muted=!0,console.log("Group muted")}unmute(){const e=r.get(this);if(e.muted)this.volume=e.previousVolume,e.muted=!1,console.log("Group unmuted")}}var b=B;window.Pluck={Timeline:q,Sound:h,Group:b};
