var s=new WeakMap;class l{constructor(e={}){const t=e.context||new(window.AudioContext||window.webkitAudioContext),o=t.createGain(),i={fileName:e.file||null,context:t,source:null,audioBuffer:e.audioBuffer||null,volume:e.volume||1,loop:e.loop||!1,attack:e.attack||0.04,release:e.release||0.04,offset:e.offset||0,gainNode:o,mediaStream:e.input||null,clearBuffer:e.clearBuffer||!1,isPlaying:!1};s.set(this,i),this.initialized=this.initialize(e)}async initialize(e){try{await this.initSource(e)}catch(t){console.error("Error initializing source:",t)}}get fileName(){return s.get(this).fileName}get context(){return s.get(this).context}get source(){return s.get(this).source}set source(e){const t=s.get(this);t.source=e}get audioBuffer(){return s.get(this).audioBuffer}set audioBuffer(e){const t=s.get(this);t.audioBuffer=e}get volume(){return s.get(this).volume}set volume(e){const t=s.get(this);if(t.volume=e,t.gainNode)t.gainNode.gain.value=e}get loop(){return s.get(this).loop}set loop(e){const t=s.get(this);t.loop=e}get attack(){return s.get(this).attack}set attack(e){const t=s.get(this);t.attack=e}get release(){return s.get(this).release}set release(e){const t=s.get(this);t.release=e}get offset(){return s.get(this).offset}set offset(e){const t=s.get(this);t.offset=e}get gainNode(){return s.get(this).gainNode}get mediaStream(){return s.get(this).mediaStream}set mediaStream(e){const t=s.get(this);t.mediaStream=e}get clearBuffer(){return s.get(this).clearBuffer}set clearBuffer(e){const t=s.get(this);t.clearBuffer=e}get isPlaying(){return s.get(this).isPlaying}set isPlaying(e){const t=s.get(this);t.isPlaying=e}async initSource(e){if(e.file)await this.loadFromFile(e.file);else if(e.wave)this.initFromWave(e.wave);else if(e.input)await this.initFromInput();else this.initFromWave({type:"sine",frequency:440})}async loadFromFile(e){try{console.log("Fetching sound file:",e);const o=await(await fetch(e)).arrayBuffer();this.audioBuffer=await this.context.decodeAudioData(o),this.createSourceFromBuffer(),console.log("Sound file loaded:",e)}catch(t){console.error("Error loading sound file:",t)}}createSourceFromBuffer(){if(!this.audioBuffer){console.error("No audio buffer to create source from");return}this.source=this.context.createBufferSource(),this.source.buffer=this.audioBuffer,this.source.loop=this.loop,this.connectGain(),this.source.onended=()=>{if(console.log("Sound playback ended"),this.isPlaying=!1,this.source=null,this.clearBuffer)this.audioBuffer=null},console.log("Created source from buffer:",this.source)}initFromWave(e){this.source=this.context.createOscillator(),this.source.type=e.type||"sine",this.source.frequency.value=e.frequency||440,this.connectGain(),this.source.onended=()=>{console.log("Sound playback ended"),this.isPlaying=!1,this.source=null}}async initFromInput(){try{const e=await navigator.mediaDevices.getUserMedia({audio:!0});this.mediaStream=e,this.source=this.context.createMediaStreamSource(e),this.connectGain()}catch(e){console.error("Error initializing microphone input:",e)}}connectGain(){if(this.source)this.source.connect(this.gainNode),this.gainNode.connect(this.context.destination),console.log("Source connected to gain node");else console.error("No source to connect to gain node")}async play(){if(this.isPlaying=!0,await this.initialized,this.context.state==="suspended")await this.context.resume();if(!this.audioBuffer&&!this.source){console.error("No audio buffer or source available to play");return}if(this.audioBuffer)this.createSourceFromBuffer();if(this.mediaStream){console.log("Microphone input started");return}if(this.source&&this.source.start)this.applyAttack(),console.log("Starting source",this.source),this.source.start(this.context.currentTime,this.offset);else console.error("No source to play"),this.isPlaying=!1}stop(){if(this.isPlaying=!1,this.mediaStream){this.mediaStream.getTracks().forEach((e)=>e.stop()),this.source.disconnect(),this.source=null,console.log("Microphone input stopped");return}if(this.source&&this.source.stop)this.applyRelease(()=>{if(this.source.stop(),this.source.disconnect(),this.source=null,this.clearBuffer)this.audioBuffer=null;console.log("Stopping sound")})}clone(){const e=s.get(this);return new l({context:e.context,audioBuffer:e.audioBuffer,volume:e.volume,loop:e.loop,attack:e.attack,release:e.release,input:this.mediaStream||null,clearBuffer:e.clearBuffer,file:this.source&&this.source.buffer?this.source.buffer:void 0,wave:this.source&&this.source.frequency?{type:this.source.type,frequency:this.source.frequency.value}:void 0})}applyAttack(){if(!this.gainNode)return;const e=this.context.currentTime;this.gainNode.gain.setValueAtTime(0,e),this.gainNode.gain.linearRampToValueAtTime(this.volume,e+this.attack),console.log("Attack applied")}applyRelease(){if(!this.gainNode)return;const e=this.context.currentTime;this.gainNode.gain.setValueAtTime(this.volume,e),this.gainNode.gain.linearRampToValueAtTime(0,e+this.release),console.log("Release applied")}connect(e){const t=s.get(this);if(t.source)t.source.connect(e);else console.error("No source to connect")}disconnect(e){const t=s.get(this);if(t.source)t.source.disconnect(e);else console.error("No source to disconnect")}}var n=l;class g{constructor(){this.queue=[]}enqueue(e,t){const o={item:e,priority:t};this.queue.push(o),this.bubbleUp(this.queue.length-1)}dequeue(){if(this.isEmpty())return null;const e=this.queue[0],t=this.queue.pop();if(this.queue.length>0)this.queue[0]=t,this.bubbleDown(0);return e.item}peek(){return this.queue[0]}isEmpty(){return this.queue.length===0}bubbleUp(e){const t=this.queue[e];while(e>0){const o=Math.floor((e-1)/2),i=this.queue[o];if(t.priority>=i.priority)break;this.queue[e]=i,e=o}this.queue[e]=t}bubbleDown(e){const t=this.queue.length,o=this.queue[e];while(!0){const i=2*e+1,a=2*e+2;let c=this.queue[i],f=this.queue[a],h=null;if(i<t){if(c.priority<o.priority)h=i}if(a<t){if(h===null&&f.priority<o.priority||h!==null&&f.priority<c?.priority)h=a}if(h===null)break;this.queue[e]=this.queue[h],e=h}this.queue[e]=o}remove(e){const t=this.queue.findIndex((i)=>i.item===e);if(t===-1)return!1;const o=this.queue.pop();if(t<this.queue.length)this.queue[t]=o,this.bubbleUp(t),this.bubbleDown(t);return!0}}var d=g;var r=new WeakMap;class p{constructor(){const e={context:null,currentTime:0,isPlaying:!1,soundQueue:new d,intervalIDs:{},events:{onStart:[],onStop:[],onLoop:[],onSoundScheduled:[],onSoundPlayed:[],onEffectTriggered:[]}};r.set(this,e)}get context(){return r.get(this).context}set context(e){const t=r.get(this);t.context=e}get currentTime(){return r.get(this).currentTime}set currentTime(e){const t=r.get(this);t.currentTime=e}get isPlaying(){return r.get(this).isPlaying}set isPlaying(e){const t=r.get(this);t.isPlaying=e}get soundQueue(){return r.get(this).soundQueue}get intervalIDs(){return r.get(this).intervalIDs}set intervalIDs(e){const t=r.get(this);t.intervalIDs=e}get events(){return r.get(this).events}on(e,t){const o=r.get(this);if(o.events[e])o.events[e].push(t);else console.error(`Event ${e} is not supported.`)}off(e,t){const o=r.get(this);if(o.events[e])o.events[e]=o.events[e].filter((i)=>i!==t);else console.error(`Event ${e} is not supported.`)}future(e){return this.currentTime+e}startTimer(e,t){const o=setInterval(()=>{t()},e*1000);this.intervalIDs={...this.intervalIDs,[e]:o}}stopTimer(e){const t=this.intervalIDs[e];if(t){clearInterval(t);const{[e]:o,...i}=this.intervalIDs;this.intervalIDs=i}}triggerEvent(e,t,o){const i=r.get(this);if(i.events[e])i.events[e].forEach((a)=>a(t,o))}async start(){this.context=new(window.AudioContext||window.webkitAudioContext),console.log("Audio context initialized",this.context),this.isPlaying=!0,this.triggerEvent("onStart"),await this.context.resume(),this.loop()}async loop(){if(!this.isPlaying)return;this.currentTime=this.context.currentTime;while(!this.soundQueue.isEmpty()&&this.soundQueue.peek().priority<=this.currentTime){const e=this.soundQueue.dequeue(),{sound:t,time:o}=e;if(console.log(`Processing item scheduled for time: ${o}`),t){console.log("Playing sound:",t);try{this.triggerEvent("onSoundPlayed",t,this.currentTime),await t.play()}catch(i){console.error("Error playing sound:",i)}}}this.triggerEvent("onLoop"),requestAnimationFrame(()=>this.loop())}stop(){Object.keys(this.intervalIDs).forEach((e)=>{this.stopTimer(Number(e))});while(!this.soundQueue.isEmpty()){const e=this.soundQueue.dequeue(),{sound:t}=e;if(t&&t.isPlaying)t.stop()}if(this.context&&this.context.state!=="closed")this.context.close();this.isPlaying=!1,this.triggerEvent("onStop")}scheduleSound(e,t){this.soundQueue.enqueue({sound:e,time:t},t),console.log("Queue state after scheduling:",this.soundQueue),this.triggerEvent("onSoundScheduled",e,t)}rescheduleSound(e,t){this.soundQueue.remove(e),this.scheduleSound(e,t)}playNow(e){this.soundQueue.enqueue({sound:e,time:this.currentTime},this.currentTime),console.log(`Playing sound immediately at ${this.currentTime}`)}async addSound(e,t,o={}){const i=new n({file:e,...o});await i.initialized,this.scheduleSound(i,t)}async playSound(e,t={}){const o=new n({file:e,...t});await o.initialized,await o.play(),this.triggerEvent("onSoundPlayed",o,this.currentTime)}runEverySecond(){console.log("Every second")}}var m=p;var u=new WeakMap;class y{constructor(e,t){if(!e){console.error("No audio context provided to Group");return}const o=t.filter((c)=>c.context!==e);if(o.length){console.error("Sounds with mismatched audio contexts:",o);return}const i=e.createGain(),a={context:e,gainNode:i,sounds:t.filter((c)=>c instanceof n)||[],volume:1,muted:!1,previousVolume:1};a.sounds.forEach((c)=>c.connect(i)),i.connect(e.destination),u.set(this,a)}get context(){return u.get(this).context}get gainNode(){return u.get(this).gainNode}get sounds(){return u.get(this).sounds}get volume(){return u.get(this).gainNode.gain.value}set volume(e){u.get(this).gainNode.gain.value=e}get muted(){return u.get(this).muted}set muted(e){u.get(this).muted=e}get previousVolume(){return u.get(this).previousVolume}set previousVolume(e){u.get(this).previousVolume=e}async play(){const e=this.sounds.map(async(t)=>{if(!t.isPlaying)try{await t.play()}catch(o){console.error("Error playing sound:",o)}});await Promise.all(e)}async stop(){const e=this.sounds.map(async(t)=>{if(t.isPlaying)t.stop()});await Promise.all(e)}addSounds(e){if(!Array.isArray(e)){console.error("Not an array of sounds");return}e.forEach((t)=>{if(!(t instanceof n)){console.error("The sound is not an instance of Sound class:",t);return}if(t.context!==this.context){console.error("Cannot add sound to group: mismatched audio contexts",t);return}this.sounds.push(t),t.connect(this.gainNode),console.log("Added and connected new sound to group gain node:",t)})}removeSound(e){const t=this.sounds.indexOf(e);if(t===-1){console.warn("The sound is not in the group");return}if(e.disconnect(this.gainNode),this.sounds.splice(t,1),console.log("Removed and disconnected sound from group gain node:",e),this.sounds.length===0)this.gainNode.disconnect(this.context.destination)}setVolumeGradually(e,t=1){const o=this.context.currentTime;gainNode.gain.setValueAtTime(gainNode.gain.value,o),gainNode.gain.linearRampToValueAtTime(e,o+t),console.log(`Volume set to ${e} over ${t} seconds`)}mute(){if(!this.muted)this.previousVolume=this.volume,this.volume=0,this.muted=!0,console.log("Group muted")}unmute(){if(this.muted)this.volume=this.previousVolume,this.muted=!1,console.log("Group unmuted")}}var N=y;window.Pluck={Timeline:m,Sound:n,Group:N};
